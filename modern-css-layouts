Tomado de el aporte de un estudiante platzi

Qué son los Modern CSS Layouts?
Apuntes
¿Qué es Layout?
•	Layout viene del inglés el cual significa diseño
•	Colocar tus cajas en el lugar que elijas con respecto a la ventana principal y el resto de cajas
________________________________________
•	Cuando hablamos de Modern CSS Layouts es un concepto de hace más de 10 años
•	Características de la web en 2010:
•	Progresivamente mejorado
•	Adaptable a diversos usuarios
•	Modulares y eficientes
•	Tipográficamente ricos
Progresivamente mejorado
•	Base sólida e ir añadiendo estilos complejos para aquellos navegadores que pudieran soportarlo
•	En ese momento la compatibilidad entre navegadores era notorio
Adaptable a diversos usuarios
•	Al tener una gran cantidad:
•	La amplia gama de navegadores
•	Dispositivos
•	Resoluciones de pantalla
•	Tamaños de fuente
•	Tecnologías de asistencia
•	Se pretendía llegar de una manera óptima a todos
Modulares y eficiente
•	El CSS se pueda dividir en fragmentos que funcionan de forma independiente para crear componentes de diseño que se pueden reutilizar de forma independiente.
•	Se hablaba de un framework que permitiera a los desarrolladores escribir código frontend modular rápido, fácil de mantener y basado en estándares.
________________________________________
•	Muchas de esas cosas son las que deseamos lograr en la actualidad
•	CSS nació en 1996 (lanzamiento inicial)
•	Basado en un diseño de revista
Así fue como:
1.	Se idearon un modelo de diseño "basado en marcos" ("frame-based" layout model) en 1996
2.	Luego, lanzaron el "Advanced Layout Module" en 2005
3.	Que luego, pasó a ser "Template Layout Module" en 2016
•	Es decir que siempre se ha deseado lo mismo como tener control en:
•	Columnas
•	Filas
•	Tipografías
•	Contenido organizado (Header, Footer, ...)
Básicamente el layout CSS ha cambiado drásticamente, así como la forma en que desarrollamos la interfaz de nuestros sitios
•	Ahora tenemos una opción real en términos de los métodos de diseño que usamos en CSS para desarrollar nuestros, sitios, lo que significa que a menudo tenemos que elegir qué enfoque tomar.
•	Como desarrolladores debemos asegurarnos la comprensión actual del layout esté actualizada
•	Veremos diferentes layouts y formas de construirlos


•	
•	Super Centered
HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Super centered</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="parent">
        <div class="child">:)</div>
    </div>
</body>
</html>
CSS
* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

html {
    font-size: 62.5%;
}

.parent {
    height: 100vh;
    width: 100vw;
    display: grid;
    place-items: center;
    background-color: aqua;
}

.child {
    height: 50px;
    width: 20px;
    display: grid;
    place-items: center;
    background-color: blueviolet;
    font-size: 1.2rem;
    font-weight: bold;
}
Ver más
9
Responder

Sidebar Says HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sidebar Says</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="parent">
        <div class="sidebar">min: 150 / max: 25%</div>
        <div class="element">Takes the second grid position</div>
    </div>
</body>
</html>
CSS
* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

html {
    font-size: 62.5%;
}

.parent {
    height: 100vh;
    width: 100vw;
    display: grid;
    grid-template-columns: minmax(150px, 25%) 1fr;
}

.sidebar, .element {
    display: grid;
    place-items: center;
    font-size: 1.2rem;
    font-weight: bold;
}

.sidebar {
    background-color: yellow;
}

.element {
    background-color: palevioletred;
}
Ver más
7
Responder
•	 
Abelardo Salazar
Estudiante•hace 3 años
The Deconstructed Pancake
HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deconstructed pancake</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="parent">
        <div class="child">1</div>
        <div class="child">2</div>
        <div class="child">3</div>
    </div>
</body>
</html>
CSS
* {
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

html {
    font-size: 62.5%;
}

.parent {
    height: 100vh;
    width: 100vw;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
}

.child {
    flex: 0 1 300px;
    display: grid;
    place-items: center;
    margin: 15px;
    background-color: aqua;
    font-size: 1.2rem;
    font-weight: bold;
}

